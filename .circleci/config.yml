version: 2.1

orbs:
  android: circleci/android@2.3.0
  ruby: circleci/ruby@2.1.0

aliases:
  - &workspace
      ~/passkeys-sdk
  - &unit-test-folder-result
      ~/test-results/junit
  - &tmp-workspace
      tmp/workspace
  - &env-vars-file
      env_vars

executors:
  ubuntu-small-executor:
    #https://circleci:com/developer/images/image/cimg/base
    docker:
      - image: cimg/base:2024.02
    resource_class: small
    working_directory: *workspace

  android-executor:
    docker:
      # https://circleci.com/developer/images/image/cimg/android#image-tags
      - image: cimg/android:2024.01.1
    resource_class: medium
    working_directory: *workspace

  android-node-executor:
    docker:
      # https://circleci.com/developer/images/image/cimg/android#image-tags
      - image: cimg/android:2024.01.1-node
    resource_class: medium
    working_directory: *workspace

  mac-os-executor:
    macos:
      xcode: "15.1.0"
    resource_class: macos.m1.medium.gen1
    working_directory: *workspace

  ruby-executor:
    docker:
      - image: cimg/ruby:3.3.0
    working_directory: *workspace

commands:
  test-results-folder:
    parameters:
      folder:
        default: *unit-test-folder-result
        type: string
    steps:
      - run:
          name: Copying tests results to <<parameters.folder>>
          command: |
            mkdir -p <<parameters.folder>>
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} <<parameters.folder>> \;
          when: always
          working_directory: *workspace

  install-jdk-17:
    steps:
      - run:
          name: Install OpenJDK 17
          command: |
            sudo apt-get update && sudo apt-get install openjdk-17-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
            java -version

  danger-check:
    parameters:
      danger_params:
        type: string
    steps:
      - run:
          name: Danger check
          command: bundle exec danger <<parameters.danger_params>> --verbose --remove-previous-comments

  move_directory:
    parameters:
      from:
        description: directory to move
        type: string
      to:
        description: destination directory
        type: string
    steps:
      - run: cp -R <<parameters.from>> <<parameters.to>>

jobs:
  assemble:
    executor: android-executor

    steps:
      - checkout
      - android/restore-build-cache
      - android/restore-gradle-cache
      - ruby/install-deps
      - run:
          name: Assemble build
          command: ./gradlew assembleDebug assembleDebugAndroidTest
      - danger-check:
          danger_params: --danger_id=assemble --dangerfile=dangerfiles/dangerfile_pr_validation
      - android/save-gradle-cache
      - android/save-build-cache

  lint-check:
    executor: ruby-executor

    steps:
      - checkout
      - android/restore-build-cache
      - android/restore-gradle-cache
      - ruby/install-deps
      - install-jdk-17
      - run:
          name: Kotlin lint
          command: ./gradlew ktlintCheck
      - danger-check:
          danger_params: --danger_id=lint --dangerfile=dangerfiles/dangerfile_ktlint
      - android/save-gradle-cache
      - android/save-build-cache

  detekt-check:
    executor: android-executor

    steps:
      - checkout
      - android/restore-build-cache
      - android/restore-gradle-cache
      - ruby/install-deps
      - run:
          name: Detekt check
          command: ./gradlew detekt
      - danger-check:
          danger_params: --danger_id=detekt --dangerfile=dangerfiles/dangerfile_detekt
      - android/save-gradle-cache
      - android/save-build-cache

  android-unit-test:
    executor: android-executor

    steps:
      - checkout
      - android/restore-build-cache
      - android/restore-gradle-cache
      - ruby/install-deps
      - run:
          name: Kover code coverage report
          command: ./gradlew :shared:koverXmlReportDebug
      - danger-check:
          danger_params: --danger_id=unit_tests --dangerfile=dangerfiles/dangerfile_code_coverage
      - run:
          name: Kover code coverage rule
          command: ./gradlew :shared:koverVerify
      - android/save-gradle-cache
      - android/save-build-cache
      - test-results-folder
      - store_test_results:
          path: *unit-test-folder-result
      - store_artifacts:
          path: /home/circleci/test-results/

  ios-unit-test:
    executor: mac-os-executor

    steps:
      - checkout
      - android/restore-build-cache
      - android/restore-gradle-cache
      - run:
          name: Run Unit tests
          command: ./gradlew :shared:iosSimulatorArm64Test
      - android/save-gradle-cache
      - android/save-build-cache
      - test-results-folder
      - store_test_results:
          path: *unit-test-folder-result
      - store_artifacts:
          path: /Users/distiller/test-results/

  android-sdk-size-report:
    executor: android-executor

    steps:
      - checkout
      - android/restore-build-cache
      - android/restore-gradle-cache
      - ruby/install-deps
      - run:
          name: Android SDK size report
          command: ./gradlew generateSizeReport
      - store_artifacts:
          path: "shared/build/outputs/sizeReport"
          destination: sizeReport
      - run: mkdir -p builds
      - move_directory:
          from: shared/build/outputs/sizeReport/
          to: builds
      - danger-check:
          danger_params: --danger_id=android_sdk_report --dangerfile=dangerfiles/dangerfile_android_sdk_size_report
      - persist_to_workspace:
          root: *workspace
          paths:
            - builds

  ios-sdk-size-report:
    executor: mac-os-executor

    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Install Gem dependencies
          command: |
            cd iosApp
            bundle install
      - run:
          name: Build and measure
          command: |
            cd iosApp
            bundle exec fastlane size_demo_app
      - danger-check:
          danger_params: --danger_id=ios_sdk_report --dangerfile=dangerfiles/dangerfile_ios_sdk_size_report

  ios-generate-framework:
    executor: mac-os-executor

    steps:
      - checkout
      - run:
          name: Create Framework
          command: ./gradlew iosArm64Binaries
      - run:
          name: Compress Artifacts
          command: |
            tar -cvzf debugFramework.tar.gz shared/build/bin/iosArm64/debugFramework
            tar -cvzf releaseFramework.tar.gz shared/build/bin/iosArm64/releaseFramework
      - store_artifacts:
          path: debugFramework.tar.gz
      - store_artifacts:
          path: releaseFramework.tar.gz

  android-generate-aar:
    executor: android-executor

    steps:
      - checkout
      - run:
          name: Create aars
          command: |
            ./gradlew :shared:assembleDebug
            mv shared/build/outputs/aar/shared-debug.aar TwilioPasskeys-debug.aar
            ./gradlew :shared:assembleRelease
            mv shared/build/outputs/aar/shared-release.aar TwilioPasskeys.aar
      - store_artifacts:
          path: TwilioPasskeys-debug.aar
      - store_artifacts:
          path: TwilioPasskeys.aar

  publish-kotlin-multiplatform-sdk-to-nexus-internal-repository:
    executor: android-executor

    steps:
      - checkout
      - android/restore-build-cache
      - android/restore-gradle-cache
      - run:
          name: Generate signing key ring file
          command: |
            echo $SIGNING_KEY | base64 -d >> $SIGNING_SECRET_KEY_RING_FILE
      - run:
          name: Publish SDK to internal repository
          command: ./gradlew sonatypeTwilioPasskeysStagingRepositoryUpload | tee gradle-task-output.log
      - run:
          name: Save internal repository link
          command: ./scripts/save_sonatype_repository_internal_release_url.sh gradle-task-output.log $TMP_WORKSPACE $ENV_VARS_FILE
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - persist_to_workspace:
          root: *workspace
          paths:
            - *tmp-workspace

  generate-android-sample-app-using-internal-sdk:
    executor: android-node-executor

    steps:
      - checkout
      - android/restore-build-cache
      - android/restore-gradle-cache
      - attach_workspace:
          at: *workspace
      - run:
          name: Set sample backend URL
          command: |
            ./scripts/update_gradle_properties.sh sampleBackendUrl \"${SAMPLE_BACKEND_URL}\" androidApp/gradle.properties
      - run:
          name: Generate APK with maven repo url
          command: |
            source "$TMP_WORKSPACE/$ENV_VARS_FILE" 
            echo $REPO_NAME
            echo $REPO_URL
            
            ./gradlew :androidApp:assembleRelease -PmavenUsername=$OSSRH_USERNAME -PmavenPassword=$OSSRH_PASSWORD -PmavenRepoUrl=$REPO_URL
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - run:
          name: Install Firebase CLI
          command: npm install --save-dev firebase-tools
      - run:
          name: Deploy to Firebase App Distribution
          command: |
            firebase appdistribution:distribute androidApp/build/outputs/apk/release/androidApp-release.apk --app $FIREBASE_ANDROID_APP_ID --token $FIREBASE_TOKEN --groups qa --debug | tee firebase_app_distribution_output.log
      - run:
          name: Save distributed app link
          command: |
            ./scripts/save_firebase_app_distribution_url.sh firebase_app_distribution_output.log $TMP_WORKSPACE $ENV_VARS_FILE
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - persist_to_workspace:
          root: *workspace
          paths:
            - *tmp-workspace

  generate-ios-sample-app-using-internal-sdk:
    executor: mac-os-executor

    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Install Gem dependencies
          command: |
            cd iosApp
            bundle install
      - run:
          name: Configure GCloud App Distribution service
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-app-distribution-service-key.json
      - run:
          name: Deploy to Firebase App Distribution
          command: |
            cd iosApp
            bundle exec fastlane deploy_demo_app

  run-android-internal-sdk-e2e-tests:
    executor: ubuntu-small-executor

    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - run:
          name: Start automation pipeline to run E2E tests
          command: |
            source "$TMP_WORKSPACE/$ENV_VARS_FILE"
            echo $ANDROID_APP_DOWNLOAD_URL

            CREATED_PIPELINE=$(curl --request POST \
              --url https://circleci.com/api/v2/project/gh/twilio/twilio-verify-passkeys-tests/pipeline \
              --header "Circle-Token: $CIRCLE_TOKEN" \
              --header "Content-Type: application/json" \
              --data '{
                "branch":"appium-main",
                "parameters":{
                  "android-app-url":"'"$ANDROID_APP_DOWNLOAD_URL"'",
                  "triggering-pipeline-id":"<< pipeline.id >>"
                }
              }' \
              | jq -r '.id'
            )
            echo "Created pipeline: $CREATED_PIPELINE"
            ./scripts/add_env_variable_to_file.sh CREATED_PIPELINE $CREATED_PIPELINE $TMP_WORKSPACE $ENV_VARS_FILE
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - persist_to_workspace:
          root: *workspace
          paths:
            - *tmp-workspace

  check-status-of-triggered-android-pipeline:
    executor: ubuntu-small-executor

    steps:
      - attach_workspace:
          at: *workspace
      - run:
          name: Check triggered workflow status
          command: |
            source "$TMP_WORKSPACE/$ENV_VARS_FILE"

            echo $CREATED_PIPELINE
            created_workflow_status=$(curl --request GET \
                --url "https://circleci.com/api/v2/pipeline/${CREATED_PIPELINE}/workflow" \
                --header "Circle-Token: $CIRCLE_TOKEN" \
                --header "Content-Type: application/json" \
              | jq -r '.items[0].status'
            )
            echo $created_workflow_status
            if [[ "$created_workflow_status" != "success" ]]; then
              echo "Workflow not successful - ${created_workflow_status}"
              (exit -1) 
            fi

            echo "Created workflow successful"
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file

  run-ios-internal-sdk-e2e-tests:
    executor: ubuntu-small-executor

    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - run:
          name: Start automation pipeline to run E2E tests
          command: |
            source "$TMP_WORKSPACE/$ENV_VARS_FILE"

            firebase_url=$(cat firebase_url.txt)
            echo "Firebase URL: $firebase_url"
            echo "export FIREBASE_URL=$firebase_url" >> $BASH_ENV
            echo $FIREBASE_URL

            CREATED_PIPELINE=$(curl --request POST \
              --url https://circleci.com/api/v2/project/gh/twilio/twilio-verify-passkeys-tests/pipeline \
              --header "Circle-Token: $CIRCLE_TOKEN" \
              --header "Content-Type: application/json" \
              --data '{
                "branch":"appium-main",
                "parameters":{
                  "ios-app-url":"'"$FIREBASE_URL"'",
                  "triggering-pipeline-id":"<< pipeline.id >>"
                }
              }' \
              | jq -r '.id'
            )
            echo "Created pipeline: $CREATED_PIPELINE"
            ./scripts/add_env_variable_to_file.sh CREATED_PIPELINE $CREATED_PIPELINE $TMP_WORKSPACE $ENV_VARS_FILE
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - persist_to_workspace:
          root: *workspace
          paths:
            - *tmp-workspace

  check-status-of-triggered-ios-pipeline:
    executor: ubuntu-small-executor

    steps:
      - attach_workspace:
          at: *workspace
      - run:
          name: Check triggered workflow status
          command: |
            source "$TMP_WORKSPACE/$ENV_VARS_FILE"

            echo $CREATED_PIPELINE
            created_workflow_status=$(curl --request GET \
                --url "https://circleci.com/api/v2/pipeline/${CREATED_PIPELINE}/workflow" \
                --header "Circle-Token: $CIRCLE_TOKEN" \
                --header "Content-Type: application/json" \
              | jq -r '.items[0].status'
            )
            echo $created_workflow_status
            if [[ "$created_workflow_status" != "success" ]]; then
              echo "Workflow not successful - ${created_workflow_status}"
              (exit -1) 
            fi

            echo "Created workflow successful"
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file

workflows:
  build-all:
    jobs:
      - assemble
      - lint-check:
          requires:
            - assemble
      - android-sdk-size-report:
          requires:
            - assemble
      - ios-sdk-size-report:
          requires:
            - assemble
      - detekt-check:
          requires:
            - assemble
      - android-unit-test:
          requires:
            - lint-check
            - detekt-check
      - ios-unit-test:
          requires:
            - lint-check
            - detekt-check
      - ios-generate-framework:
          requires:
            - ios-unit-test
      - android-generate-aar:
          requires:
            - android-unit-test
      - publish-kotlin-multiplatform-sdk-to-nexus-internal-repository:
          requires:
            - android-unit-test
            - ios-unit-test
          filters:
            branches:
              only:
                - /release.*/
                - /hotfix.*/
      - generate-android-sample-app-using-internal-sdk:
          requires:
            - publish-kotlin-multiplatform-sdk-to-nexus-internal-repository
      - generate-ios-sample-app-using-internal-sdk:
          requires:
            - ios-unit-test
      - run-ios-internal-sdk-e2e-tests:
          requires:
            - generate-ios-sample-app-using-internal-sdk
      - wait-for-ios-internal-sdk-e2e-tests:
          type: approval
          requires:
            - run-ios-internal-sdk-e2e-tests
      - check-status-of-triggered-ios-pipeline:
          requires:
            - wait-for-ios-internal-sdk-e2e-tests
      - run-android-internal-sdk-e2e-tests:
          requires:
            - generate-android-sample-app-using-internal-sdk
      - wait-for-android-internal-sdk-e2e-tests:
          type: approval
          requires:
            - run-android-internal-sdk-e2e-tests
      - check-status-of-triggered-android-pipeline:
          requires:
            - wait-for-android-internal-sdk-e2e-tests
