version: 2.1

orbs:
  android: circleci/android@3.0.2
  ruby: circleci/ruby@2.3.1
  gcp-cli: circleci/gcp-cli@3.3.0
  continuation: circleci/continuation@1.1.0

setup: true

aliases:
  - &workspace
      ~/passkeys-sdk
  - &unit-test-folder-result
      ~/test-results/junit
  - &tmp-workspace
      tmp/workspace
  - &env-vars-file
      env_vars

executors:
  ubuntu-small-executor:
    # https://circleci.com/developer/images/image/cimg/base
    docker:
      - image: cimg/base:2025.02
    resource_class: small
    working_directory: *workspace

  android-executor:
    docker:
      # https://circleci.com/developer/images/image/cimg/android#image-tags
      - image: cimg/android:2025.02.1
    resource_class: medium
    working_directory: *workspace

  android-node-executor:
    docker:
      # https://circleci.com/developer/images/image/cimg/android#image-tags
      - image: cimg/android:2025.02.1-node
    resource_class: medium
    working_directory: *workspace

  mac-os-executor:
    macos:
      xcode: "15.1.0"
    resource_class: macos.m1.medium.gen1
    working_directory: *workspace

  ruby-executor:
    docker:
      - image: cimg/ruby:3.3.0
    working_directory: *workspace

parameters:
  generate-app:
    type: boolean
    default: false
  e2e-tests:
    type: boolean
    default: false

commands:
  test-results-folder:
    parameters:
      folder:
        default: *unit-test-folder-result
        type: string
    steps:
      - run:
          name: Copying tests results to <<parameters.folder>>
          command: |
            mkdir -p <<parameters.folder>>
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} <<parameters.folder>> \;
          when: always
          working_directory: *workspace

  install-jdk-17:
    steps:
      - run:
          name: Install OpenJDK 17
          command: |
            sudo apt-get update && sudo apt-get install openjdk-17-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
            java -version

  danger-check:
    parameters:
      danger_params:
        type: string
    steps:
      - run:
          name: Danger check
          command: bundle exec danger <<parameters.danger_params>> --verbose --remove-previous-comments

  move-directory:
    parameters:
      from:
        description: directory to move
        type: string
      to:
        description: destination directory
        type: string
    steps:
      - run: cp -R <<parameters.from>> <<parameters.to>>

  install-firebase-cli:
    steps:
      - run:
          name: Install Firebase CLI
          command: npm install --save-dev firebase-tools
  set-sample-backend-for-ios:
    steps:
      - run:
          name: Set sample backend URL
          command: |
            SAMPLE_BACKEND_DOMAIN="${SAMPLE_BACKEND_URL/https:\/\/}"
            SAMPLE_BACKEND_DOMAIN="${SAMPLE_BACKEND_DOMAIN/\/}"
            cd iosApp
            sed -i '' "s|let domain: String = \".*\"|let domain: String = \"${SAMPLE_BACKEND_DOMAIN}\"|" iosApp/Constants.swift
            sed -i '' "s|<string>webcredentials:.*</string>|<string>webcredentials:${SAMPLE_BACKEND_DOMAIN}</string>|" iosApp/iosApp.entitlements
  setup-certificates:
    steps:
      - run:
          name: Install Apple Certificate and Provisioning Profile
          command: |
            ./scripts/certificates_setup.sh setup

  cleanup-signing:
    steps:
      - run:
          name: Clean Up Keychain and Provisioning Profile
          command: |
            ./scripts/certificates_setup.sh cleanup


jobs:
  assemble:
    executor: android-executor

    steps:
      - checkout
      - android/restore_build_cache
      - android/restore_gradle_cache
      - ruby/install-deps
      - run:
          name: Assemble build
          command: ./gradlew assembleDebug :shared:assembleRelease assembleDebugAndroidTest
      - move-directory:
          from: shared/build/outputs/apk/androidTest/debug/
          to: builds
      - move-directory:
          from: shared/build/outputs/aar/
          to: builds
      - danger-check:
          danger_params: --danger_id=assemble --dangerfile=dangerfiles/dangerfile_pr_validation
      - android/save_gradle_cache
      - android/save_build_cache
      - persist_to_workspace:
          root: *workspace
          paths:
            - builds

  lint-check:
    executor: ruby-executor

    steps:
      - checkout
      - android/restore_build_cache
      - android/restore_gradle_cache
      - ruby/install-deps
      - install-jdk-17
      - run:
          name: Kotlin lint
          command: ./gradlew ktlintCheck
      - danger-check:
          danger_params: --danger_id=lint --dangerfile=dangerfiles/dangerfile_ktlint
      - android/save_gradle_cache
      - android/save_build_cache

  detekt-check:
    executor: android-executor

    steps:
      - checkout
      - android/restore_build_cache
      - android/restore_gradle_cache
      - ruby/install-deps
      - run:
          name: Detekt check
          command: ./gradlew detekt
      - danger-check:
          danger_params: --danger_id=detekt --dangerfile=dangerfiles/dangerfile_detekt
      - android/save_gradle_cache
      - android/save_build_cache

  android-unit-tests:
    executor: android-executor

    steps:
      - checkout
      - android/restore_build_cache
      - android/restore_gradle_cache
      - ruby/install-deps
      - run:
          name: Kover code coverage report
          command: ./gradlew :shared:koverXmlReportDebug
      - danger-check:
          danger_params: --danger_id=unit_tests --dangerfile=dangerfiles/dangerfile_code_coverage
      - run:
          name: Kover code coverage rule
          command: ./gradlew :shared:koverVerify
      - android/save_gradle_cache
      - android/save_build_cache
      - test-results-folder
      - store_test_results:
          path: *unit-test-folder-result
      - store_artifacts:
          path: /home/circleci/test-results/

  android-instrumented-tests:
    executor: android-executor

    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - android/restore_build_cache
      - android/restore_gradle_cache
      - gcp-cli/setup
      - run:
          name: Run android instrumented tests in Firebase test lab - Device Pixel 6 Api 33
          command: |
            gcloud firebase test android run --app ftl/dummy.apk --test builds/shared-debug-androidTest.apk --device model=oriole,version=33,locale=en,orientation=portrait

  ios-unit-tests:
    executor: mac-os-executor

    steps:
      - checkout
      - android/restore_build_cache
      - android/restore_gradle_cache
      - run:
          name: Run Unit tests
          command: ./gradlew :shared:iosSimulatorArm64Test
      - android/save_gradle_cache
      - android/save_build_cache
      - test-results-folder
      - store_test_results:
          path: *unit-test-folder-result
      - store_artifacts:
          path: /Users/distiller/test-results/

  android-sdk-size-report:
    executor: android-executor

    steps:
      - checkout
      - android/restore_build_cache
      - android/restore_gradle_cache
      - ruby/install-deps
      - run:
          name: Android SDK size report
          command: ./gradlew generateSizeReport
      - store_artifacts:
          path: "shared/build/outputs/sizeReport"
          destination: sizeReport
      - move-directory:
          from: shared/build/outputs/sizeReport/
          to: builds
      - danger-check:
          danger_params: --danger_id=android_sdk_report --dangerfile=dangerfiles/dangerfile_android_sdk_size_report
      - persist_to_workspace:
          root: *workspace
          paths:
            - builds

  ios-sdk-size-report:
    executor: mac-os-executor

    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Install Gem dependencies
          command: |
            cd iosApp
            bundle install
      - setup-certificates
      - run:
          name: Build and measure
          command: |
            cd iosApp
            bundle exec fastlane size_demo_app
      - danger-check:
          danger_params: --danger_id=ios_sdk_report --dangerfile=dangerfiles/dangerfile_ios_sdk_size_report
      - cleanup-signing
      - persist_to_workspace:
            root: .
            paths:
              - iosApp/IPAs/iosApp.ipa

  ios-generate-framework:
    executor: mac-os-executor

    steps:
      - checkout
      - run:
          name: Create Framework
          command: ./gradlew shared:assembleTwilioPasskeysAuthenticationXCFramework
      - run:
          name: Compress Artifacts
          command: |
            ln -s shared/build/XCFrameworks/debug/TwilioPasskeysAuthentication.xcframework TwilioPasskeysAuthentication.xcframework
            zip -r debugFramework.zip TwilioPasskeysAuthentication.xcframework
            rm TwilioPasskeysAuthentication.xcframework
            ln -s shared/build/XCFrameworks/release/TwilioPasskeysAuthentication.xcframework TwilioPasskeysAuthentication.xcframework
            zip -r releaseFramework.zip TwilioPasskeysAuthentication.xcframework
            rm TwilioPasskeysAuthentication.xcframework
      - store_artifacts:
          path: debugFramework.zip
      - store_artifacts:
          path: releaseFramework.zip
      - persist_to_workspace:
            root: *workspace
            paths:
              - debugFramework.zip
              - releaseFramework.zip

  android-generate-aar:
    
    executor: android-executor

    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - run:
          name: Create aars
          command: |
            mv builds/aar/shared-debug.aar TwilioPasskeys-debug.aar
            mv builds/aar/shared-release.aar TwilioPasskeys.aar
      - store_artifacts:
          path: TwilioPasskeys-debug.aar
      - store_artifacts:
          path: TwilioPasskeys.aar

  should-release-kmp-version:
    executor: ruby-executor

    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - run:
          name: Determine the type of release for KMP SDK
          command:  |
            KMP_RELEASE_TYPE=$(ruby scripts/versioning/require_release.rb false)
            echo "Release type = $KMP_RELEASE_TYPE"
            if [ "$KMP_RELEASE_TYPE" == "NONE" ]; then
              echo "No need to release a new version"
              circleci-agent step halt
            else
              echo "Starting a new $KMP_RELEASE_TYPE release"
            fi
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - continuation/continue:
          configuration_path: .circleci/release_kmp.yml

  should-release-ios-version:
    executor: ruby-executor

    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - run:
          name: Perform Versioning, Bump Up & Generate ChangeLog
          command: |
            IOS_RELEASE_TYPE=$(ruby scripts/versioning/require_release.rb true)
            echo "Release type = $IOS_RELEASE_TYPE"

            if [ "$IOS_RELEASE_TYPE" == "NONE" ]; then
              echo "No need to release a new version"
              circleci-agent step halt
            else
              echo "Starting a new $IOS_RELEASE_TYPE release"
            fi

            VERSION_BUMP=$(ruby scripts/versioning/bump_kmp_sdk_version.rb "$IOS_RELEASE_TYPE")
            echo "Version Bump = $VERSION_BUMP"
            CHANGELOG=$(ruby scripts/versioning/generate_changelog.rb true)
            echo "Changelog: $CHANGELOG"
            echo "VERSION_BUMP=$VERSION_BUMP" >> $BASH_ENV
            echo "CHANGELOG=$CHANGELOG" >> $BASH_ENV
          shell: /bin/bash -l
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - run:
          name: Publish XCFramework to GitHub
          command: |
            if [ ! -f releaseFramework.zip ]; then
              echo "releaseFramework.zip not found in workspace"
              exit 1
            fi
            mv releaseFramework.zip TwilioPasskeysAuthentication.xcframework.zip
            CHECKSUM=$(sha256sum TwilioPasskeysAuthentication.xcframework.zip | cut -d ' ' -f 1)
            echo "Checksum: $CHECKSUM"
            git clone git@github.com:twilio/twilio-verify-passkeys-ios.git
            cd twilio-verify-passkeys-ios
            sed -i "s|url: .*|url: \"https://github.com/twilio/twilio-verify-passkeys-ios/releases/download/v$VERSION_BUMP/TwilioPasskeysAuthentication.xcframework.zip\",|" Package.swift
            sed -i "s|checksum:\".*\"|checksum: \"$CHECKSUM\"|" Package.swift
            git config --global user.email $GITHUB_USER_EMAIL
            git config --global user.name $GITHUB_USER_NAME
            git add .
            git commit -m "Update to version v$VERSION_BUMP"
            git tag "v$VERSION_BUMP"
            git push origin main
            gem install faraday
            ruby ../scripts/versioning/create_github_release.rb twilio twilio-verify-passkeys-ios $GITHUB_API_TOKEN "v$VERSION_BUMP" "TwilioPasskeysAuthentication v$VERSION_BUMP" "${CHANGELOG}" ../TwilioPasskeysAuthentication.xcframework.zip
          shell: /bin/bash -l
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file

  generate-android-sample-app-using-local-sdk:
    executor: android-node-executor

    steps:
      - checkout
      - android/restore_build_cache
      - android/restore_gradle_cache
      - attach_workspace:
          at: *workspace
      - run:
          name: Set sample backend URL
          command: |
            ./scripts/update_gradle_properties.sh sampleBackendUrl \"${SAMPLE_BACKEND_URL}\" androidApp/gradle.properties
      - run:
          name: Generate APK
          command: |
            ./gradlew :androidApp:assembleDebug
            mv androidApp/build/outputs/apk/debug/androidApp-debug.apk sample-app.apk
            zip -r sample-app.zip sample-app.apk
      - store_artifacts:
          path: sample-app.zip
      - install-firebase-cli
      - run:
          name: Deploy to Firebase App Distribution
          command: |
            firebase appdistribution:distribute sample-app.apk --app $FIREBASE_ANDROID_APP_ID --token $FIREBASE_TOKEN --groups qa --debug --release-notes "Sample app with Local SDK" | tee firebase_app_distribution_output.log
      - run:
          name: Save distributed app link
          command: |
            ./scripts/save_firebase_app_distribution_url.sh firebase_app_distribution_output.log $TMP_WORKSPACE $ENV_VARS_FILE
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - persist_to_workspace:
          root: *workspace
          paths:
            - *tmp-workspace

  generate-ios-sample-app-using-internal-sdk:
    executor: mac-os-executor

    steps:
      - checkout
      - ruby/install-deps
      - attach_workspace:
          at: .
      - run:
          name: Install Gem dependencies
          command: |
            cd iosApp
            bundle install
      - run:
          name: Configure GCloud App Distribution service
          command: echo -n "$GCLOUD_SERVICE_KEY" | base64 --decode -o ${HOME}/gcloud-app-distribution-service-key.json
      - set-sample-backend-for-ios
      - setup-certificates
      - run:
          name: Deploy to Firebase App Distribution
          command: |
            cd iosApp
            bundle exec fastlane deploy_demo_app
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - cleanup-signing
      - persist_to_workspace:
          root: .
          paths:
            - iosApp/fastlane/firebase_url.txt

  generate-ios-simulator-app-using-internal-sdk:
    executor: mac-os-executor

    steps:
      - checkout
      - ruby/install-deps
      - attach_workspace:
          at: *workspace
      - run:
          name: Install Gem dependencies
          command: |
            cd iosApp
            bundle install
      - set-sample-backend-for-ios
      - setup-certificates
      - run:
          name: Generate simulator build
          command: |
            cd iosApp
            bundle exec fastlane simulator_app
            mv simulator_build/Build/Products/Debug-iphonesimulator/iosApp.app sample-app.app
            zip -r sample-app.zip sample-app.app
            export IOS_SIMULATOR_APP_URL="https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/iosApp/sample-app.zip"
            echo $IOS_SIMULATOR_APP_URL
            cd ..
            ./scripts/add_env_variable_to_file.sh IOS_SIMULATOR_APP_URL $IOS_SIMULATOR_APP_URL $TMP_WORKSPACE $ENV_VARS_FILE
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - cleanup-signing
      - store_artifacts:
          path: iosApp/sample-app.zip
      - persist_to_workspace:
          root: *workspace
          paths:
            - *tmp-workspace

  run-android-local-sdk-e2e-tests:
    executor: ubuntu-small-executor

    parameters:
      waiting_job_name:
        default: ""
        type: string

    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - run:
          name: Start automation pipeline to run E2E tests
          command: |
            source "$TMP_WORKSPACE/$ENV_VARS_FILE"
            echo $ANDROID_APP_DOWNLOAD_URL
            
            TRIGGERED_PIPELINE=$(./scripts/e2e_tests/trigger_e2e_tests_pipeline.sh $ANDROID_APP_DOWNLOAD_URL $CIRCLE_WORKFLOW_ID << parameters.waiting_job_name >> true false)
            echo "Triggered pipeline: $TRIGGERED_PIPELINE"
            ./scripts/add_env_variable_to_file.sh ANDROID_LOCAL_E2E_TESTS_TRIGGERED_PIPELINE $TRIGGERED_PIPELINE $TMP_WORKSPACE $ENV_VARS_FILE
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - persist_to_workspace:
          root: *workspace
          paths:
            - *tmp-workspace

  run-simulator-ios-internal-sdk-e2e-tests:
    executor: ubuntu-small-executor

    parameters:
      waiting_job_name:
        default: ""
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - run:
          name: Start automation pipeline to run E2E tests
          command: |
            source "$TMP_WORKSPACE/$ENV_VARS_FILE"
            echo $IOS_SIMULATOR_APP_URL

            TRIGGERED_PIPELINE=$(./scripts/e2e_tests/trigger_e2e_tests_pipeline.sh $IOS_SIMULATOR_APP_URL $CIRCLE_WORKFLOW_ID << parameters.waiting_job_name >> false true)
            echo "Triggered pipeline: $TRIGGERED_PIPELINE"
            ./scripts/add_env_variable_to_file.sh IOS_INTERNAL_SDK_E2E_TEST_TRIGGERED_PIPELINE $TRIGGERED_PIPELINE $TMP_WORKSPACE $ENV_VARS_FILE
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - persist_to_workspace:
          root: *workspace
          paths:
            - *tmp-workspace

  check-android-local-sdk-e2e-tests-result:
    executor: ubuntu-small-executor

    parameters:
      workflow_name_to_check:
        default: ""
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - run:
          name: Check triggered workflow status
          command: |
            source "$TMP_WORKSPACE/$ENV_VARS_FILE"
            echo $ANDROID_LOCAL_E2E_TESTS_TRIGGERED_PIPELINE
            
            TRIGGERED_E2E_TESTS_PIPELINE_STATUS=$(./scripts/e2e_tests/check_triggered_e2e_tests_pipeline_status.sh $ANDROID_LOCAL_E2E_TESTS_TRIGGERED_PIPELINE << parameters.workflow_name_to_check >>)
            echo "Triggered pipeline status: $TRIGGERED_E2E_TESTS_PIPELINE_STATUS"
            
            if [[ "$TRIGGERED_E2E_TESTS_PIPELINE_STATUS" != "success"* ]]; then
              echo "Workflow not successful - ${TRIGGERED_E2E_TESTS_PIPELINE_STATUS}"
              (exit -1) 
            fi
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file

  check-simulator-ios-sdk-e2e-tests-result:
    executor: ubuntu-small-executor

    parameters:
      workflow_name_to_check:
        default: ""
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - run:
          name: Check triggered workflow status
          command: |
            source "$TMP_WORKSPACE/$ENV_VARS_FILE"
            echo $ANDROID_LOCAL_E2E_TESTS_TRIGGERED_PIPELINE

            TRIGGERED_E2E_TESTS_PIPELINE_STATUS=$(./scripts/e2e_tests/check_triggered_e2e_tests_pipeline_status.sh $IOS_INTERNAL_SDK_E2E_TEST_TRIGGERED_PIPELINE << parameters.workflow_name_to_check >>)
            echo "Triggered pipeline status: $TRIGGERED_E2E_TESTS_PIPELINE_STATUS"

            if [[ "$TRIGGERED_E2E_TESTS_PIPELINE_STATUS" != "success"* ]]; then
              echo "Workflow not successful - ${TRIGGERED_E2E_TESTS_PIPELINE_STATUS}"
              (exit -1) 
            fi
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file

workflows:
  build-all:
    when:
      and:
        - equal: [ false, << pipeline.parameters.generate-app >> ]
        - equal: [ false, << pipeline.parameters.e2e-tests >> ]
    jobs:
      - assemble
      - lint-check:
          requires:
            - assemble
      - android-sdk-size-report:
          requires:
            - assemble
      - ios-sdk-size-report:
          context:
            - verify-passkeys
          requires:
            - assemble
      - detekt-check:
          requires:
            - assemble
      - android-unit-tests:
          requires:
            - lint-check
            - detekt-check
      - android-instrumented-tests:
          requires:
            - android-unit-tests
      - ios-unit-tests:
          context:
            - verify-passkeys
          requires:
            - lint-check
            - detekt-check
      - ios-generate-framework:
          context:
            - verify-passkeys
          requires:
            - ios-unit-tests
      - generate-ios-simulator-app-using-internal-sdk:
          context:
            - verify-passkeys
          requires:
            - ios-generate-framework
      - android-generate-aar:
          requires:
            - android-instrumented-tests
      - generate-android-sample-app-using-local-sdk:
          requires:
            - android-instrumented-tests
            - ios-unit-tests
      - run-android-local-sdk-e2e-tests:
          waiting_job_name: wait-for-android-local-sdk-e2e-tests
          requires:
            - generate-android-sample-app-using-local-sdk
      - wait-for-android-local-sdk-e2e-tests:
          type: approval
          requires:
            - run-android-local-sdk-e2e-tests
      - check-android-local-sdk-e2e-tests-result:
          workflow_name_to_check: "android-tests"
          requires:
            - wait-for-android-local-sdk-e2e-tests
      - generate-ios-sample-app-using-internal-sdk:
          context:
            - verify-passkeys
          requires:
            - ios-sdk-size-report
            - ios-generate-framework
      - run-simulator-ios-internal-sdk-e2e-tests:
          waiting_job_name: wait-for-ios-internal-sdk-e2e-tests
          requires:
            - generate-ios-simulator-app-using-internal-sdk
      - wait-for-ios-internal-sdk-e2e-tests:
          type: approval
          requires:
            - run-simulator-ios-internal-sdk-e2e-tests
      - check-simulator-ios-sdk-e2e-tests-result:
          workflow_name_to_check: "ios-tests"
          requires:
            - wait-for-ios-internal-sdk-e2e-tests
      - should-release-kmp-version:
          requires:
            - check-android-local-sdk-e2e-tests-result
          filters:
            branches:
              only:
                - main
      - should-release-ios-version:
          context:
            - verify-passkeys
          requires:
            - ios-generate-framework
            - check-simulator-ios-sdk-e2e-tests-result
          filters:
            branches:
              only:
                - main
  generate_app:
    when:
      and:
        - equal: [ true, << pipeline.parameters.generate-app >> ]
    jobs:
      - generate-ios-simulator-app-using-internal-sdk:
          context:
            - verify-passkeys
      - generate-android-sample-app-using-local-sdk
  execute_e2e_tests:
      when:
        and:
        - equal: [ true, << pipeline.parameters.e2e-tests >> ]
      jobs:
        - start_execution_android_e2e_tests:
            name: start_execution_android_e2e_tests
            type: approval
        - start_execution_ios_e2e_tests:
            name: start_execution_ios_e2e_tests
            type: approval
        - generate-android-sample-app-using-local-sdk:
            requires:
              - start_execution_android_e2e_tests
        - generate-ios-simulator-app-using-internal-sdk:
            context:
              - verify-passkeys
            requires:
              - start_execution_ios_e2e_tests
        - run-android-local-sdk-e2e-tests:
            waiting_job_name: wait-for-android-local-sdk-e2e-tests
            requires:
              - generate-android-sample-app-using-local-sdk
        - wait-for-android-local-sdk-e2e-tests:
            type: approval
            requires:
              - run-android-local-sdk-e2e-tests
        - check-android-local-sdk-e2e-tests-result:
            workflow_name_to_check: "android-tests"
            requires:
              - wait-for-android-local-sdk-e2e-tests
        - run-simulator-ios-internal-sdk-e2e-tests:
            waiting_job_name: wait-for-ios-internal-sdk-e2e-tests
            requires:
              - generate-ios-simulator-app-using-internal-sdk
        - wait-for-ios-internal-sdk-e2e-tests:
            type: approval
            requires:
              - run-simulator-ios-internal-sdk-e2e-tests
        - check-simulator-ios-sdk-e2e-tests-result:
            workflow_name_to_check: "ios-tests"
            requires:
              - wait-for-ios-internal-sdk-e2e-tests

