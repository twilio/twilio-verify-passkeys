version: 2.1

orbs:
  android: circleci/android@3.0.2

aliases:
  - &workspace
      ~/passkeys-sdk
  - &tmp-workspace
      tmp/workspace
  - &env-vars-file
      env_vars

executors:
  ubuntu-small-executor:
    #https://circleci:com/developer/images/image/cimg/base
    docker:
      - image: cimg/base:2025.02
    resource_class: small
    working_directory: *workspace

  android-executor:
    docker:
      # https://circleci.com/developer/images/image/cimg/android#image-tags
      - image: cimg/android:2024.01.1
    resource_class: medium
    working_directory: *workspace

  android-node-executor:
    docker:
      # https://circleci.com/developer/images/image/cimg/android#image-tags
      - image: cimg/android:2024.01.1-node
    resource_class: medium
    working_directory: *workspace

  mac-os-executor:
    macos:
      xcode: "16.4.0"
    resource_class: macos.m1.medium.gen1
    working_directory: *workspace

  ruby-executor:
    docker:
      - image: cimg/ruby:3.3.0
    working_directory: *workspace

commands:
  install-firebase-cli:
    steps:
      - run:
          name: Install Firebase CLI
          command: npm install --save-dev firebase-tools

  install-android-sdk:
    parameters:
      gradle-dir:
        default: .
        type: string
    steps:
      - run:
          name: "Download and setup android SDK"
          command: |
            ANDROID_SDK_ROOT="$HOME/android-sdk"
              ./scripts/download_android_sdk.sh "$ANDROID_SDK_ROOT"
              echo "sdk.dir=$ANDROID_SDK_ROOT" >> "$PROJECT_GRADLE_DIR/local.properties"
              echo "org.gradle.daemon=false" >> "$PROJECT_GRADLE_DIR/gradle.properties"
          environment:
              PROJECT_GRADLE_DIR: << parameters.gradle-dir >>

jobs:
  pre-release-kmp-check:
    executor: ruby-executor

    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - run:
          name: Pre release check
          command: |
            # Identify the type of release (major, minor, patch, or none)
            KMP_RELEASE_TYPE=$(ruby scripts/versioning/require_release.rb false)
            echo "Release type = $KMP_RELEASE_TYPE"

            if [ "$KMP_RELEASE_TYPE" == "NONE" ]; then
              echo "No need to release a new version"
              circleci-agent step halt
            else
              echo "Starting a precheck for a $KMP_RELEASE_TYPE release"
            fi

            # Bump the KMP SDK version based on the release type
            NEW_KMP_SDK_VERSION=$(ruby scripts/versioning/bump_kmp_sdk_version.rb "$KMP_RELEASE_TYPE" kmpSdkVersionName)
            echo "Version Bump = $NEW_KMP_SDK_VERSION"

            # Fetch the latest KMP SDK version
            LATEST_KMP_SDK_VERSION=$(ruby scripts/versioning/git/get_last_released_version.rb KMP)
            echo "Latest KMP SDK version = $LATEST_KMP_SDK_VERSION"

            # Compare versions and exit if they are the same
            if [ "$NEW_KMP_SDK_VERSION" = "$LATEST_KMP_SDK_VERSION" ]; then
              echo "❌ Release Aborted: The new KMP SDK version $NEW_KMP_SDK_VERSION is identical to the latest released version ($LATEST_KMP_SDK_VERSION)."
              echo "Error: Version $NEW_KMP_SDK_VERSION already exists as the latest release ($LATEST_KMP_SDK_VERSION)."
              exit 1
            fi

            echo "✅ New KMP SDK version $NEW_KMP_SDK_VERSION is unique and ready for release."
            echo "NEW_KMP_SDK_VERSION=$NEW_KMP_SDK_VERSION" >> $BASH_ENV
          shell: /bin/bash -l
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file

  publish-kotlin-multiplatform-sdk-to-nexus-internal-repository:
    executor: mac-os-executor

    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - install-android-sdk
      - run:
          name: Generate signing key ring file
          command: |
            echo $SIGNING_KEY | base64 -d >> $SIGNING_SECRET_KEY_RING_FILE
      - run:
          name: Publish SDK to internal repository
          command: ./gradlew sonatypeTwilioPasskeysStagingRepositoryUpload | tee gradle-task-output.log
      - run:
          name: Save internal repository link
          command: ./scripts/save_sonatype_repository_internal_release_url.sh gradle-task-output.log $TMP_WORKSPACE $ENV_VARS_FILE
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - persist_to_workspace:
          root: *workspace
          paths:
            - .

  publish-kmp:
    executor: android-executor

    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - android/restore_build_cache
      - android/restore_gradle_cache
      - run:
          name: Publish to Maven Central
          command: |
            source "$TMP_WORKSPACE/$ENV_VARS_FILE"
            echo $REPO_NAME
            echo "Publishing to Maven Central"

            ./gradlew releaseSonatypeStagingRepository --staging-repository-id $REPO_NAME
          environment:
            TMP_WORKSPACE: *tmp-workspace
            ENV_VARS_FILE: *env-vars-file
      - run:
          name: Create GitHub release
          command: |
            TAG_VERSION=$CIRCLE_TAG
            RELEASE_NOTES=$(ruby scripts/versioning/generate_changelog.rb false)
            ruby scripts/versioning/create_github_release.rb twilio twilio-verify-passkeys $GITHUB_API_TOKEN $TAG_VERSION $TAG_VERSION "${RELEASE_NOTES}"

workflows:
  release-kmp:
    jobs:
      #- pre-release-kmp-check
      - publish-kotlin-multiplatform-sdk-to-nexus-internal-repository:
          context:
            - verify-passkeys-android
            - verify-maven-publishing-android
          requires:
            - pre-release-kmp-check
      - publish-kmp:
          context:
            - verify-passkeys
            - verify-passkeys-android
            - verify-maven-publishing-android
          requires:
            - publish-kotlin-multiplatform-sdk-to-nexus-internal-repository
